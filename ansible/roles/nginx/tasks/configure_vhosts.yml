---
- name: Template API vhost
  ansible.builtin.template:
    src: api.conf.j2
    dest: /etc/nginx/sites-available/api.conf
    mode: "0644"
  when: nginx_configure_api
  notify: Reload nginx

- name: Remover vhost API quando desabilitado
  ansible.builtin.file:
    path: /etc/nginx/sites-available/api.conf
    state: absent
  when: not nginx_configure_api
  notify: Reload nginx

- name: Template Frontend vhost
  ansible.builtin.template:
    src: frontend.conf.j2
    dest: /etc/nginx/sites-available/frontend.conf
    mode: "0644"
  when: nginx_configure_frontend
  notify: Reload nginx

- name: Remover vhost do frontend quando desabilitado
  ansible.builtin.file:
    path: /etc/nginx/sites-available/frontend.conf
    state: absent
  when: not nginx_configure_frontend
  notify: Reload nginx

- name: Habilitar sites necessários
  ansible.builtin.file:
    src: "/etc/nginx/sites-available/{{ item }}"
    dest: "/etc/nginx/sites-enabled/{{ item }}"
    state: link
  loop: "{{ ([ 'api.conf' ] if nginx_configure_api else []) + ([ 'frontend.conf' ] if nginx_configure_frontend else []) }}"
  notify: Reload nginx

- name: Remover sites desabilitados
  ansible.builtin.file:
    path: "/etc/nginx/sites-enabled/{{ item }}"
    state: absent
  loop: "{{ ([] if nginx_configure_api else ['api.conf']) + ([] if nginx_configure_frontend else ['frontend.conf']) }}"
  when: (not nginx_configure_api) or (not nginx_configure_frontend)
  notify: Reload nginx

- name: Remover default site
  ansible.builtin.file:
    path: /etc/nginx/sites-enabled/default
    state: absent
  notify: Reload nginx

- name: Testar configuração do Nginx
  ansible.builtin.command: nginx -t
  register: nginx_test
  changed_when: false
  failed_when: false

- name: Falhar quando a configuração do Nginx estiver inválida
  ansible.builtin.fail:
    msg: "nginx -t falhou: {{ nginx_test.stderr | default(nginx_test.stdout) }}"
  when: nginx_test.rc != 0

- name: Aplicar reloads pendentes do Nginx
  ansible.builtin.meta: flush_handlers