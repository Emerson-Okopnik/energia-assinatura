# roles/backend/tasks/main.yml
- name: Clonar repositório (shallow)
  ansible.builtin.git:
    repo: "{{ repository_url }}"
    dest: "{{ repo_path }}"
    version: "{{ deploy_branch }}"
    force: true

- name: Sincronizar release atual
  ansible.builtin.copy:
    src: "{{ repo_path }}/api-laravel/"
    dest: "{{ release_path }}"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"
    mode: "0755"
    remote_src: true

- name: Remover storage do release
  ansible.builtin.file:
    path: "{{ release_path }}/storage"
    state: absent
    
- name: Criar symlink storage compartilhado
  ansible.builtin.file:
    src: "{{ app_root }}/shared/storage"
    dest: "{{ release_path }}/storage"
    state: link
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Ajustar permissões de storage/cache
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    owner: "{{ php_fpm_pool_user }}"
    group: "{{ php_fpm_pool_group }}"
    mode: "0775"
  loop:
    - "{{ app_root }}/shared/storage"
    - "{{ app_root }}/shared/bootstrap/cache"

- name: Detectar executável do Chrome/Chromium (auto)
  ansible.builtin.stat:
    path: "{{ item }}"
  loop: "{{ browsershot_chrome_candidates }}"
  loop_control:
    label: "{{ item }}"
  register: browsershot_chrome_candidates_stats
  when: browsershot_chrome_path == 'auto'
  changed_when: false

- name: Selecionar executável do Chrome/Chromium (auto)
  ansible.builtin.set_fact:
    browsershot_chrome_path: >-
      {{ browsershot_chrome_candidates_stats.results
         | selectattr('stat.exists', 'defined')
         | selectattr('stat.exists')
         | map(attribute='item')
         | list
         | first
         | default('auto') }}
  when: browsershot_chrome_path == 'auto'

- name: Falhar se nenhum Chrome/Chromium foi encontrado
  ansible.builtin.fail:
    msg: >-
      Não foi possível localizar um executável do Chrome/Chromium nos caminhos {{ browsershot_chrome_candidates | join(', ') }}.
      Instale o navegador ou defina browsershot_chrome_path manualmente.
  when: browsershot_chrome_path == 'auto'
  
- name: Renderizar .env
  ansible.builtin.template:
    src: env.laravel.j2
    dest: "{{ release_path }}/.env"
    mode: "0640"
    owner: "{{ app_user }}"
    group: "{{ app_user }}"

- name: Verificar autoloader do Composer
  ansible.builtin.stat:
    path: "{{ release_path }}/vendor/autoload.php"
  register: autoload_stat

- name: Limpar cache de configuração
  ansible.builtin.command:
    cmd: php artisan config:clear
    chdir: "{{ release_path }}"
  when: autoload_stat.stat.exists | default(false)
  changed_when: false

- name: Instalar dependências Composer
  become: true
  become_user: "{{ app_user }}"
  community.general.composer:
    command: install
    working_dir: "{{ release_path }}"
    prefer_dist: true
    no_dev: true
    optimize_autoloader: true

- name: Instalar dependências npm (Browsershot/Puppeteer)
  community.general.npm:
    path: "{{ release_path }}"
    production: false

- name: Construir assets Laravel (se houver)
  ansible.builtin.command:
    cmd: npm run build
    chdir: "{{ release_path }}"
  when: lookup('ansible.builtin.fileglob', release_path + '/vite.config.js', errors='ignore') != []

- name: Gerar APP_KEY se não existir
  ansible.builtin.command:
    cmd: php artisan key:generate --force --ansi
    chdir: "{{ release_path }}"
  when: app_key is undefined or app_key|length == 0

- name: Definir JWT_SECRET
  ansible.builtin.command:
    cmd: php artisan jwt:secret --force
    chdir: "{{ release_path }}"
  when: jwt_secret is undefined or jwt_secret|length == 0

- name: Limpar caches Laravel antes das migrações
  ansible.builtin.command:
    cmd: php artisan optimize:clear
    chdir: "{{ release_path }}"
  changed_when: false
  
- name: Rodar migrações
  ansible.builtin.command:
    cmd: php artisan migrate --force
    chdir: "{{ release_path }}"

- name: Limpar e otimizar caches
  ansible.builtin.command:
    cmd: php artisan optimize
    chdir: "{{ release_path }}"

- name: Aplicar handlers pendentes após otimização
  ansible.builtin.meta: flush_handlers

- name: Publicar storage link
  ansible.builtin.command:
    cmd: php artisan storage:link
    chdir: "{{ release_path }}"
  args:
    creates: "{{ release_path }}/public/storage"

- name: Criar serviço de fila
  ansible.builtin.template:
    src: queue-worker.service.j2
    dest: /etc/systemd/system/laravel-queue.service
    mode: "0644"
  notify:
    - Reload systemd units
    - Restart queue worker

- name: Ativar serviço de fila
  ansible.builtin.systemd:
    name: laravel-queue.service
    enabled: true
    state: started

